// ライブラリの実装 //
#import "@preview/codelst:2.0.1": sourcecode


//フォント設定//
#let gothic  = "YuMincho"

//本文フォント//
#set text(11pt, font: gothic, lang: "ja") 

//タイトル・見出しフォント//
#set heading(numbering: "1.1")
#let heading_font(body) = {
  show regex("[\p{scx: Han}\p{scx: Hira}\p{scx: Kana}]"): set text(font: gothic)
  body
}
#show heading: heading_font

// ページ設定 //
#set page(
    paper: "a4",
    margin: (x: 25mm, y: 25mm),
    columns: 1,
    //fill: 背景色,
    numbering: "1",
    number-align: center,
    header: [
        #set text(8pt)
    ]
)

// 数式の表示の仕方を表示 //
#set math.equation(numbering: "(1)")

//本文ここから//
= 演習の目的
実験を通して、LEDマトリクス TOM-1588BH-Bの使い方と仕組みの習得を目的とする。

= 演習の使用部品
== @LEDマトリクス の電子部品 ( LEDマトリクス TOM-1588BH-B) を次のような点から調べなさい。

#figure(
  image("./img/LEDマトリクス.png",width: 50%),
  caption: "LEDマトリクス"
)<LEDマトリクス>

=== どのような部品か

8列8行のドットマトリックスディスプレイで、赤色の発光ダイオードを64個搭載している。 
8列8行のLEDで構成されており、各LEDは各列で共通のアノードと各行で共通のカソードを持っている。
電光掲示板や電子時計などに使用される。

=== どのような仕組みか

TOM-1588BH-Bは廃盤となっており、データシートが見つからなかったため、代わりに後継機であるTOM-1588AMG-N について調査した。
@LEDマトリクス回路図 に示すように、各LEDはアノードとカソードに接続されており、アノードに正の電圧を加え、カソードに接地することでLEDを点灯させる @led_matix_oasistek_dataheet。
各LEDは行と列の交点に配置されており、行と列の交点に電圧を加えることで、特定のLEDのみを点灯させることができる。

#figure(
  image("./img/LEDマトリクス回路図.png",width: 50%),
  caption: "LEDマトリクス回路図"
)<LEDマトリクス回路図>

=== どのような入力を取り扱うのか

電圧を入力として取り扱う。各LEDに対してアノードに正の電圧を加え、カソードに接地することでLEDを点灯させる。

=== 入力に応じて出力がどう変化するのか (データシートや仕様書を参考に) 

一つ一つのLEDは独立して制御されるため、入力に応じて出力が変化する。各LEDに対してアノードに正の電圧を加え、カソードに接地することでLEDを点灯させる。

=== どのようなピンアサイン (各ピンの役割) か 

@LEDマトリクスピンアサイン に示すように、8列8行のLEDマトリクスには、各列に対してアノードが、各行に対してカソードが接続されている。
実際のピンアサインと光る位置は綺麗に並んでいる訳ではないため、ピンアサインを確認しながら接続する必要がある。

#figure(
  image("./img/LEDマトリクスピンアサイン.png",width: 90%),
  caption: "LEDマトリクスピンアサイン"
)<LEDマトリクスピンアサイン>

=== 正しい動作の条件、範囲は何か

- ピーク順⽅向電流（1/10 デューティ サイクル、0.1ms パルス幅）: 80mA
- ドットあたりの消費電⼒ : 75mW
- 連続順⽅向電流 : 20mA
- 推奨動作電流 : 12mA
- 逆電圧 : 5V
- 動作温度範囲 : -25°C 〜 +85°C
- 保管温度範囲 : -30°C 〜 +85°C
- 鉛フリーはんだ温度（座⾯下1/16インチ）: 260°C 3秒

#pagebreak() // ページを分ける

= 課題内容

== フルカラーLEDを光らせる

=== 実験その１ (動作確認)

LEDマトリクスをダイナミック点灯方式を使って動作させる。配線して、アノードコモン(row 側) を用いたプログラムを入力しArduinoでその動作を確認し考察しなさい。

*回路図* 

@実験その1回路図 は、実験 1 の回路図を示す。 複数の出力ポートをまとめてコントロールし、LEDマトリクスに図を表示させる回路である。

#figure(
  image("./img/実験その1回路図.png",width: 90%),
  caption: "実験その1回路図"
)<実験その1回路図>

#pagebreak() // ページを分ける

*プログラム*

@LEDマトリクスをアノードコモンで光らせるプログラム は、実験1 で使用したアナログ出力値を切り替えるプログラムを示している。
#figure(
  sourcecode[```c
int ANODEPIN[] = {2, 3, 4, 5, 6, 7, 8, 9};
int CATHODEPIN[] = {10, 11, 12, 14, 15, 16, 17, 18};
int mat_A[8][8] = {
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 1, 1, 0, 0, 0, 0, 0},
    {1, 1, 1, 0, 0, 0, 1, 0},
    {0, 0, 1, 1, 1, 0, 0, 1},
    {0, 0, 1, 1, 1, 1, 1, 0},
    {0, 0, 1, 1, 1, 1, 1, 0},
    {0, 1, 0, 0, 0, 0, 1, 0},
    {1, 0, 0, 0, 0, 0, 0, 1}};
int mat_B[8][8] = {
    {0, 1, 1, 0, 0, 0, 1, 0},
    {1, 1, 1, 0, 0, 0, 0, 1},
    {0, 0, 1, 1, 1, 0, 0, 1},
    {0, 0, 1, 1, 1, 1, 1, 0},
    {0, 0, 1, 1, 1, 1, 1, 0},
    {0, 0, 0, 1, 0, 0, 1, 0},
    {0, 0, 0, 0, 1, 1, 0, 0},
    {0, 0, 0, 1, 0, 0, 0, 0}};
void setup(){
    delay(1000); // 初期化処理待ち
    for (int ano = 0; ano < 8; ano++){
        pinMode(ANODEPIN[ano], OUTPUT);
        digitalWrite(ANODEPIN[ano], LOW);
    }
    for (int cat = 0; cat < 8; cat++){
        pinMode(CATHODEPIN[cat], OUTPUT);
        digitalWrite(CATHODEPIN[cat], HIGH);
    }
}
void loop(){
    unsigned long ms = millis();
    if ((ms / 1000) % 2 == 1){
        showMatrix(mat_A);
    }else{
        showMatrix(mat_B);
    }
}
void showMatrix(int matrix[8][8]){
    for (int ano = 0; ano < 8; ano++){
        for (int cat = 0; cat < 8; cat++){
            digitalWrite(CATHODEPIN[cat], (matrix[ano][cat] == 0 ? 1 : 0));
        }
        // 三項演算子を他の式でもできる
        digitalWrite(ANODEPIN[ano], HIGH);
        delay(500);
        digitalWrite(ANODEPIN[ano], LOW);
    }
}
    ```],
  caption: "LEDマトリクスをアノードコモンで光らせるプログラム"
)<LEDマトリクスをアノードコモンで光らせるプログラム>

- プログラムの概要
LEDマトリクスをダイナミック点灯方式を用いてアノードコモンで光らせるプログラムである
- プログラムの説明
  - 1–31 行目: 設定
    - 1,2行目はアノードとカソードのピンを設定している。
    - 3–20行目は、LEDマトリクスの点灯パターンを設定している。
    - 21–31行目は、pinMode関数を用いて、各ピンを出力に設定している。
  - 32–39 行目：プログラムの動作
    - 33行目で現在の時間を取得している。
    - 34–38行目で、時間に応じて、点灯パターンを切り替えている。
  - 40–49 行目 : showMatrix関数
    - 40–48行目で、各行のLEDを点灯させている。

*実験結果*

アノードのときは行ごとに制御できる。 
アノードの時、 HIGTからLOWへの切り替えるdeleyを3以下にするとチラつきがなくなる。 
アノードの時は同じアノードの行のなかで光るLEDの数が多い時は光が薄く、 LEDの数が少ない時は光が濃くなる。 
テキスト上のコードのままだとチラつきが発生した。 
行ごとに点灯消灯を管理している 

*考察*
+ LEDはダイナミック点灯を利用して、1つ1つは別のタイミングで光っているものでも、目の残像を利用して同時に光っているように錯覚させていた。 
+ アノードコモンでLEDを光らせる場合、アノードからくる5Vの電圧を分圧してカソード側に流すため並列接続の関係で電圧が分圧してしまうため、LEDが暗く写ってしまう。 
+ 三項演算子を用いて、アノードコモンでプログラムを書いているときにmat_A配列の値を逆にして、カソードの選択を行っていた。 
+ アノードコモンを用いるときは二重for文でマトリクスの光り方を制御している。第一for文では行を見ていて、第二for文でその行の各列を1つずつ見ている。 
+ 列を最後まで見た後入出力を切り替えて光らないようにして、次の行を見ていくので行ごとに描写されている。 




=== 実験その２ (カソードコモンを用いた動作の確認)

配線して、カソードコモン(col 側) を用いたプログラム(図5.4) を入力しArduinoで動作を確認し考察しなさい。


*回路図* 

*プログラム*

*実験結果*

*考察*


=== 発展その１ (センサによる識別を用いたLED 制御)

LED マトリクスと加速度センサを組み合わせ、センサが反応している4 方向をLED マトリクス上に矢印の図(図5.6) で表せるようにしなさい。境界値・不感帯は、各自で判断すること。

#figure(
  image("./img/矢印の図.png",width: 50%),
  caption: "矢印の図"
)<矢印の図>


*回路図* 

*プログラム*

*実験結果*

*考察*

=== 発展その2(センサとスイッチを用いたLED 制御)

タクトスイッチを使って2 つのモード（A, B）の切替を導入し、発展その1 を拡張する。
モードA はシステム動作停止モードとし、モードB はシステム動作可能モードとする。初期モー
ドは「B. システム動作可能モード」とし、タクトスイッチの長押しで「A. システム動作停止モー
ド」に移行するようにしなさい。
またA ⇒ B のモード切り替え時に「起動」を意味するアニメーション、B ⇒ A の切り替え時には
「停止」を意味するアニメーションを再生する必要がある。このアニメーションは視覚的に充分確
認できる必要がある。なお「長押し」とは約2 秒程度タクトスイッチを押した状態が続く状態とす
る。モードの概要図とアニメーション図をそれぞれ @モードの概要図 、 @アニメーション図 に示す。

#figure(
  image("./img/モードの概要図.png",width: 90%),
  caption: "モードの概要図"
)<モードの概要図>

#figure(
  image("./img/アニメーション図.png",width: 90%),
  caption: "アニメーション図"
)<アニメーション図>

*回路図* 

*プログラム*

*実験結果*

*考察*


=== まとめ


#pagebreak() // ページを分ける

// bibファイルの指定 //
#bibliography("./bibliography.bib")

